/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.koneksi.koneksi;
import static com.koneksi.koneksi.conn;
import static com.koneksi.koneksi.pst;
import com.model.model_inventory;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author admin
 */
public class FrameSales extends javax.swing.JFrame {

    public static String ambil_no_order, ambil_no_order_detail;

    /**
     * Creates new form FrameSales
     */
    public FrameSales() {
        initComponents();
        dataTableOrder();
        dataTableCust();
        dataTableOrderInvoiced();
        dataTableOrderReady();
        NoUrutCustomer();
        NoUrutOrder();
        NoUrutOrderInvoiced();
        NoUrutOrderReady();
        NoUrutOrderCompleted();
        dataTableOrderCompleted();
        NoUrutAllOrder();
        dataTableAllOrder();
        dataTableOrderReport();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        customer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataCustomer = new javax.swing.JTable();
        btn_tambah_cust = new javax.swing.JButton();
        btn_refresh_customer = new javax.swing.JButton();
        Order = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataOrderSalesNew = new javax.swing.JTable();
        btn_refresh_order = new javax.swing.JButton();
        btn_kirim_invoice = new javax.swing.JButton();
        b_cek_detail_order = new javax.swing.JButton();
        btn_buat_order = new javax.swing.JButton();
        order_invoiced = new javax.swing.JPanel();
        b_cek_detail_order1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dataOrderSalesInvoiced = new javax.swing.JTable();
        order_ready = new javax.swing.JPanel();
        b_cek_detail_order2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        dataOrderSalesReady = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        cek_completed_order1 = new javax.swing.JButton();
        completed_orders = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        dataOrderSalesCompleted = new javax.swing.JTable();
        all_orders = new javax.swing.JPanel();
        cetak_order_report1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        dataOrderAllOrder = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        dataOrderReportOrder = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane2.setBackground(new java.awt.Color(31, 164, 171));
        jTabbedPane2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTabbedPane2KeyReleased(evt);
            }
        });

        customer.setBackground(new java.awt.Color(31, 164, 171));

        dataCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No", "ID Customer ", "Nama Customer", "Alamat", "Telepon"
            }
        ));
        dataCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataCustomerKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(dataCustomer);

        btn_tambah_cust.setText("+ Customer");
        btn_tambah_cust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tambah_custActionPerformed(evt);
            }
        });

        btn_refresh_customer.setText("Refresh");
        btn_refresh_customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refresh_customerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerLayout = new javax.swing.GroupLayout(customer);
        customer.setLayout(customerLayout);
        customerLayout.setHorizontalGroup(
            customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(btn_tambah_cust)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_refresh_customer, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
            .addGroup(customerLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        customerLayout.setVerticalGroup(
            customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_refresh_customer, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_tambah_cust, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Customer", customer);

        Order.setBackground(new java.awt.Color(31, 164, 171));

        dataOrderSalesNew.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Order", "Tanggal Bayar", "Status Order", "Nama Sales"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(dataOrderSalesNew);
        if (dataOrderSalesNew.getColumnModel().getColumnCount() > 0) {
            dataOrderSalesNew.getColumnModel().getColumn(0).setPreferredWidth(20);
            dataOrderSalesNew.getColumnModel().getColumn(3).setPreferredWidth(100);
            dataOrderSalesNew.getColumnModel().getColumn(4).setPreferredWidth(70);
        }

        btn_refresh_order.setText("Refresh");
        btn_refresh_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refresh_orderActionPerformed(evt);
            }
        });

        btn_kirim_invoice.setText("Kirim Invoice");
        btn_kirim_invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kirim_invoiceActionPerformed(evt);
            }
        });

        b_cek_detail_order.setText("Cek Detail Order");
        b_cek_detail_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cek_detail_orderActionPerformed(evt);
            }
        });

        btn_buat_order.setText("Buat Order");
        btn_buat_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buat_orderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OrderLayout = new javax.swing.GroupLayout(Order);
        Order.setLayout(OrderLayout);
        OrderLayout.setHorizontalGroup(
            OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrderLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(OrderLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btn_buat_order, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_kirim_invoice)
                        .addGap(18, 18, 18)
                        .addComponent(b_cek_detail_order)
                        .addGap(293, 293, 293)
                        .addComponent(btn_refresh_order)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        OrderLayout.setVerticalGroup(
            OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OrderLayout.createSequentialGroup()
                .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_refresh_order, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(OrderLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_kirim_invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_buat_order, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_cek_detail_order, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Order", Order);

        order_invoiced.setBackground(new java.awt.Color(31, 164, 171));
        order_invoiced.setName(""); // NOI18N

        b_cek_detail_order1.setLabel("Cek Detail Order");
        b_cek_detail_order1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cek_detail_order1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dataOrderSalesInvoiced.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Order", "Tanggal Bayar", "Status Order", "Admin Gudang"
            }
        ));
        dataOrderSalesInvoiced.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataOrderSalesInvoicedKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(dataOrderSalesInvoiced);

        javax.swing.GroupLayout order_invoicedLayout = new javax.swing.GroupLayout(order_invoiced);
        order_invoiced.setLayout(order_invoicedLayout);
        order_invoicedLayout.setHorizontalGroup(
            order_invoicedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(order_invoicedLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(order_invoicedLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(b_cek_detail_order1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(47, 47, 47))
        );
        order_invoicedLayout.setVerticalGroup(
            order_invoicedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(order_invoicedLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(order_invoicedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_cek_detail_order1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        jTabbedPane2.addTab("Invoiced Order", order_invoiced);

        order_ready.setBackground(new java.awt.Color(31, 164, 171));

        b_cek_detail_order2.setLabel("Cek Detail Order");
        b_cek_detail_order2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cek_detail_order2ActionPerformed(evt);
            }
        });

        dataOrderSalesReady.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Order", "Tanggal Bayar", "Status Order", "Admin Gudang"
            }
        ));
        dataOrderSalesReady.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataOrderSalesReadyKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(dataOrderSalesReady);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cek_completed_order1.setText("Bayar");
        cek_completed_order1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cek_completed_order1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout order_readyLayout = new javax.swing.GroupLayout(order_ready);
        order_ready.setLayout(order_readyLayout);
        order_readyLayout.setHorizontalGroup(
            order_readyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(order_readyLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(cek_completed_order1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_cek_detail_order2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(44, 44, 44))
            .addGroup(order_readyLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        order_readyLayout.setVerticalGroup(
            order_readyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, order_readyLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(order_readyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cek_completed_order1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_cek_detail_order2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        jTabbedPane2.addTab("Ready To Pay", order_ready);

        completed_orders.setBackground(new java.awt.Color(31, 164, 171));

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        dataOrderSalesCompleted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nomor Order", "Nama Customer", "Total Harga Barang ", "Tanggal Order", "Tanggal Bayar", "Status Order", " Nama Sales"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(dataOrderSalesCompleted);

        javax.swing.GroupLayout completed_ordersLayout = new javax.swing.GroupLayout(completed_orders);
        completed_orders.setLayout(completed_ordersLayout);
        completed_ordersLayout.setHorizontalGroup(
            completed_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(completed_ordersLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, completed_ordersLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(40, 40, 40))
        );
        completed_ordersLayout.setVerticalGroup(
            completed_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(completed_ordersLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Completed Order", completed_orders);

        all_orders.setBackground(new java.awt.Color(31, 164, 171));

        cetak_order_report1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cetak_order_report1.setText("Cetak All Order");
        cetak_order_report1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cetak_order_report1ActionPerformed(evt);
            }
        });

        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        dataOrderAllOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Nomor Order", "Nama Customer", "Total Harga Barang ", "Tanggal Order", "Tanggal Bayar", "Status Order", "Nama Sales"
            }
        ));
        jScrollPane6.setViewportView(dataOrderAllOrder);

        dataOrderReportOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Jumlah Order", "Jumlah New Order", " Jumlah Invoiced Order", "Jumlah Shipped Order", "Jumlah Completed Order"
            }
        ));
        jScrollPane7.setViewportView(dataOrderReportOrder);

        javax.swing.GroupLayout all_ordersLayout = new javax.swing.GroupLayout(all_orders);
        all_orders.setLayout(all_ordersLayout);
        all_ordersLayout.setHorizontalGroup(
            all_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(all_ordersLayout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addGroup(all_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, all_ordersLayout.createSequentialGroup()
                        .addGroup(all_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(all_ordersLayout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(cetak_order_report1))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, all_ordersLayout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(45, 45, 45))))
        );
        all_ordersLayout.setVerticalGroup(
            all_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(all_ordersLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton5)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(all_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(all_ordersLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(all_ordersLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(cetak_order_report1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("All Order", all_orders);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_tambah_custActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tambah_custActionPerformed
        // TODO add your handling code here:
        TambahCustomer tc = new TambahCustomer();
        tc.setVisible(true);
    }//GEN-LAST:event_btn_tambah_custActionPerformed

    private void dataCustomerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataCustomerKeyReleased
        UbahCustomer();
        dataTableCust();
        NoUrutCustomer();
    }//GEN-LAST:event_dataCustomerKeyReleased

    private void btn_refresh_customerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refresh_customerActionPerformed
        dataTableCust();
        NoUrutCustomer();
    }//GEN-LAST:event_btn_refresh_customerActionPerformed

    private void jTabbedPane2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane2KeyReleased

    private void btn_refresh_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refresh_orderActionPerformed
        dataTableOrder();
        NoUrutOrder();
    }//GEN-LAST:event_btn_refresh_orderActionPerformed

    private void btn_kirim_invoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kirim_invoiceActionPerformed
        int tabelData = dataOrderSalesNew.getSelectedRow();
        if (dataOrderSalesNew.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Pilih datanya pada tabel !!!");
        } else {
            ambil_no_order = dataOrderSalesNew.getValueAt(tabelData, 1).toString();
            try {
                model_inventory mi = new model_inventory();
                mi.KirimInvoice(this);
                NoUrutOrder();
            } catch (SQLException ex) {
                Logger.getLogger(FrameSales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_kirim_invoiceActionPerformed
    public static void dataTableOrder() {
        int jumBaris = 0;
        int i = 0;
        conn = koneksi.koneksi();
        String query = "SELECT * FROM header_order as a LEFT JOIN customer as b\n"
                + "ON a.id_customer=b. id_customer\n"
                + "LEFT JOIN users as c\n"
                + "on a.id_user_sales = c.id_users\n"
                + "LEFT JOIN detail_order as d\n"
                + "on a.no_order = d.no_order\n"
                + "LEFT JOIN barang as e\n"
                + "on d.kd_barang = e.kd_barang\n"
                + "WHERE status_order='New' \n"
                + "GROUP BY a.no_order\n"
                + "ORDER by a.status_order DESC, d.tanggal_order DESC";
        try {
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);

            while (res.next()) {
                jumBaris++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        }

        String isi[][] = new String[jumBaris][7];
        try {
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            //int ad = 0;
            while (data.next()) {
                isi[i][1] = data.getString("no_order");
                isi[i][2] = data.getString("nama_customer");
                isi[i][3] = data.getString("total_penjualan");
                isi[i][4] = data.getString("tanggal_order");
                isi[i][5] = data.getString("status_order");
                isi[i][6] = data.getString("nama_users");
                i++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

        String NamaKolom[] = {"No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Order", "Status Order", "Nama Sales"};
        //DefaultTableModel model = new DefaultTableModel(){}; 
        DefaultTableModel dtms = new DefaultTableModel(isi, NamaKolom) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        dataOrderSalesNew.setModel(dtms);
    }
    private void b_cek_detail_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cek_detail_orderActionPerformed
        int tabelData = dataOrderSalesNew.getSelectedRow();
        if (dataOrderSalesNew.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Pilih datanya pada tabel !!!");
        } else {
            ambil_no_order_detail = dataOrderSalesNew.getValueAt(tabelData, 1).toString();
            try {
                DetailOrderSales detailor = new DetailOrderSales();
                detailor.setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(FrameSales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_b_cek_detail_orderActionPerformed

    private void btn_buat_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buat_orderActionPerformed
        TambahOrder tb = new TambahOrder();
        tb.setVisible(true);
    }//GEN-LAST:event_btn_buat_orderActionPerformed

    private void b_cek_detail_order1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cek_detail_order1ActionPerformed
        int tabelData = dataOrderSalesInvoiced.getSelectedRow();
        if (dataOrderSalesInvoiced.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Pilih datanya pada tabel !!!");
        } else {
            ambil_no_order_detail = dataOrderSalesInvoiced.getValueAt(tabelData, 1).toString();
            try {
                DetailOrderSales detailor = new DetailOrderSales();
                detailor.setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(FrameSales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_b_cek_detail_order1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dataTableOrderInvoiced();
        NoUrutOrderInvoiced();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void dataOrderSalesInvoicedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataOrderSalesInvoicedKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_dataOrderSalesInvoicedKeyReleased

    private void b_cek_detail_order2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cek_detail_order2ActionPerformed
        int tabelData = dataOrderSalesReady.getSelectedRow();
        if (dataOrderSalesReady.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Pilih datanya pada tabel !!!");
        } else {
            ambil_no_order_detail = dataOrderSalesReady.getValueAt(tabelData, 1).toString();
            try {
                DetailOrderSales detailor = new DetailOrderSales();
                detailor.setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(FrameSales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_b_cek_detail_order2ActionPerformed

    private void dataOrderSalesReadyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataOrderSalesReadyKeyReleased
        // TODO add your handling code here:
        dataTableOrderReady();
         NoUrutOrderReady();
    }//GEN-LAST:event_dataOrderSalesReadyKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dataTableOrderReady();
        NoUrutOrderReady();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void NoUrutOrderCompleted(){
        String no;
        int dos = dataOrderSalesCompleted.getRowCount();
	for(int j=0;j<dos;j++){
            no = String.valueOf(j+1);
            //readData.setValueAt(no+".",j,0);
            dataOrderSalesCompleted.setValueAt(no,j,0); 
        }
    }
    
    public static void dataTableOrderCompleted(){
        int jumBaris =0;
        int i=0;
        conn = koneksi.koneksi();
        String query="SELECT * FROM header_order as a LEFT JOIN customer as b\n" +
                        "ON a.id_customer=b. id_customer\n" +
                        "LEFT JOIN users as c\n" +
                        "on a.id_user_sales = c.id_users\n" +
                        "LEFT JOIN detail_order as d\n" +
                        "on a.no_order = d.no_order\n" +
                        "LEFT JOIN barang as e\n" +       
                        "on d.kd_barang = e.kd_barang\n" +
                        "WHERE status_order='Completed' \n" +
                        "GROUP BY a.no_order\n" +
                        "ORDER by a.status_order DESC, d.tanggal_order DESC";
        try{
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);
            
            while(res.next()){
                jumBaris++; 
            }
        }catch(SQLException ex){  
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        } 
        
        String isi[][] = new String[jumBaris][7];
        try{
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            //int ad = 0;
            while(data.next()){   
                isi[i][1] = data.getString("no_order");
                isi[i][2] = data.getString("nama_customer");
                isi[i][3] = data.getString("total_penjualan"); 
                isi[i][4] = data.getString("tanggal_bayar");              
                isi[i][5] = data.getString("status_order"); 
                isi[i][6] = data.getString("nama_users"); 
                i++; 
            }
        }catch(SQLException ex){  
            JOptionPane.showMessageDialog(null, ex); 
        } 
        
        String NamaKolom[] = {"No","Nomor Order","Nama Customer","Total Harga Barang","Tanggal Bayar","Status Order","Nama Sales"}; 
        //DefaultTableModel model = new DefaultTableModel(){}; 
        DefaultTableModel dtms = new DefaultTableModel(isi,NamaKolom){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        dataOrderSalesCompleted.setModel(dtms);
    }
    
    private void cek_completed_order1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cek_completed_order1ActionPerformed
        int tabelData = dataOrderSalesReady.getSelectedRow();
        if (dataOrderSalesReady.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Pilih datanya pada tabel !!!");
        } else {
            ambil_no_order = dataOrderSalesReady.getValueAt(tabelData, 1).toString();
            try {
                model_inventory mi = new model_inventory();
                mi.BayarOrder(this);
                dataTableOrderReady();
                //dataTableOrderCompleted();
            } catch (SQLException ex) {
                Logger.getLogger(FrameSales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cek_completed_order1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        NoUrutOrderCompleted();
        dataTableOrderCompleted();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        NoUrutAllOrder();
        dataTableAllOrder();
        dataTableOrderReport();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cetak_order_report1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cetak_order_report1ActionPerformed
        // TODO add your handling code here:
        try{
            //int i = dataOrderReportOrder.getSelectedRow();
            String jumlah_order = dataOrderReportOrder.getValueAt(0, 0).toString();
            String jumlah_new_order = dataOrderReportOrder.getValueAt(0, 1).toString();
            String jumlah_invoiced_order = dataOrderReportOrder.getValueAt(0, 2).toString();
            String jumlah_shipped_order = dataOrderReportOrder.getValueAt(0, 3).toString();
            String jumlah_completed_order = dataOrderReportOrder.getValueAt(0, 4).toString();
            
            conn = koneksi.koneksi();
            FileInputStream fis = new FileInputStream("D:\\PROGRAM DAMARA\\Lepkom\\InventorySoftware\\src\\com\\report\\laporanAllOrder.jrxml");
            BufferedInputStream bufferedInputStream = new BufferedInputStream(fis);

            Map map = new HashMap();
            map.put("jumlah_order", jumlah_order);
            map.put("jumlah_new_order", jumlah_order);
            map.put("jumlah_invoiced_order", jumlah_order);
            map.put("jumlah_shipped_order", jumlah_order);
            map.put("jumlah_completed_order", jumlah_order);
            
            
            JasperReport jasperReport = (JasperReport) JasperCompileManager.compileReport(bufferedInputStream);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, conn);

            JasperViewer.viewReport(jasperPrint, false);
        }catch(FileNotFoundException | JRException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_cetak_order_report1ActionPerformed

    public static void NoUrutOrder() {
        String no;
        int dos = dataOrderSalesNew.getRowCount();
        for (int j = 0; j < dos; j++) {
            no = String.valueOf(j + 1);
            //readData.setValueAt(no+".",j,0);
            dataOrderSalesNew.setValueAt(no, j, 0);
        }
    }

    private void UbahCustomer() {
        int input = JOptionPane.showOptionDialog(null, "Apakah ingin mengubah data customer ?", "Ubah Data Customer",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);

        if (input == JOptionPane.OK_OPTION) {
            try {
                int barisCellCekCust = dataCustomer.getSelectedRow();
                int kolomCellCekCust = dataCustomer.getSelectedColumn();
                String id_cust = (String) dataCustomer.getValueAt(barisCellCekCust, 1);
                String nama_cust = (String) dataCustomer.getValueAt(barisCellCekCust, 2);
                String alamat_cust = (String) dataCustomer.getValueAt(barisCellCekCust, 3);
                String telp_cust = (String) dataCustomer.getValueAt(barisCellCekCust, 4);

                String query_ubah_cust = "UPDATE customer SET nama_customer=?, alamat=?, telp=? WHERE id_customer=?";

                pst = conn.prepareStatement(query_ubah_cust);

                pst.setString(1, nama_cust);
                pst.setString(2, alamat_cust);
                pst.setString(3, telp_cust);
                pst.setString(4, id_cust);
                pst.executeUpdate();

                JOptionPane.showMessageDialog(null, "Data berhasil di update");
                dataTableCust();
                NoUrutCustomer();
            } catch (SQLException | ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, e);

            }
        }
    }

    public void NoUrutCustomer() {
        String no;
        int dc = dataCustomer.getRowCount();
        for (int a = 0; a < dc; a++) {
            no = String.valueOf(a + 1);
            dataCustomer.setValueAt(no, a, 0);
        }
    }

    public static void dataTableCust() {
        int jumBaris = 0;
        int i = 0;
        conn = koneksi.koneksi();
        String query = "SELECT * from customer";
        try {
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);

            while (res.next()) {
                jumBaris++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        }

        String isi[][] = new String[jumBaris][5];
        try {
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            while (data.next()) {
                isi[i][1] = data.getString("id_customer");
                isi[i][2] = data.getString("nama_customer");
                isi[i][3] = data.getString("alamat");
                isi[i][4] = data.getString("telp");
                i++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi Kesalahan");

        }
        String NamaKolom[] = {"No", "ID customer", "Nama customer", "Alamat", "Telepon cutomer"};
        DefaultTableModel dtms = new DefaultTableModel(isi, NamaKolom) {
            //@override
            public boolean isCellEditable(int row, int column) {
                switch (column) {
                    case 0:
                        return false;
                    case 1:
                        return false;
                    default:
                        return true;

                }

            }

        };
        dataCustomer.setModel(dtms);

    }

    public void NoUrutOrderInvoiced() {
        String no;
        int dos = dataOrderSalesInvoiced.getRowCount();
        for (int j = 0; j < dos; j++) {
            no = String.valueOf(j + 1);
            //readData.setValueAt(no+".",j,0);
            dataOrderSalesInvoiced.setValueAt(no, j, 0);
        }
    }

    public static void dataTableOrderInvoiced() {
        int jumBaris = 0;
        int i = 0;
        conn = koneksi.koneksi();
        String query = "SELECT * FROM header_order as a LEFT JOIN customer as b\n"
                + "ON a.id_customer=b. id_customer\n"
                + "LEFT JOIN users as c\n"
                + "on a.id_user_sales = c.id_users\n"
                + "LEFT JOIN detail_order as d\n"
                + "on a.no_order = d.no_order\n"
                + "LEFT JOIN barang as e\n"
                + "on d.kd_barang = e.kd_barang\n"
                + "WHERE status_order='Invoice' \n"
                + "GROUP BY a.no_order\n"
                + "ORDER by a.status_order DESC, d.tanggal_order DESC";
        try {
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);

            while (res.next()) {
                jumBaris++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        }

        String isi[][] = new String[jumBaris][7];
        try {
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            //int ad = 0;
            while (data.next()) {
                isi[i][1] = data.getString("no_order");
                isi[i][2] = data.getString("nama_customer");
                isi[i][3] = data.getString("total_penjualan");
                isi[i][4] = data.getString("tanggal_order");
                isi[i][5] = data.getString("status_order");
                isi[i][6] = data.getString("nama_users");
                i++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

        String NamaKolom[] = {"No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Order", "Status Order", "Nama Sales"};
        //DefaultTableModel model = new DefaultTableModel(){}; 
        DefaultTableModel dtms = new DefaultTableModel(isi, NamaKolom) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        dataOrderSalesInvoiced.setModel(dtms);
    }

    public void NoUrutOrderReady() {
        String no;
        int dos = dataOrderSalesReady.getRowCount();
        for (int j = 0; j < dos; j++) {
            no = String.valueOf(j + 1);
            //readData.setValueAt(no+".",j,0);
            dataOrderSalesReady.setValueAt(no, j, 0);
        }
    }
    
     public void NoUrutAllOrder(){
        String no;
        int dos = dataOrderAllOrder.getRowCount();
	for(int j=0;j<dos;j++){
            no = String.valueOf(j+1);
            //readData.setValueAt(no+".",j,0);
            dataOrderAllOrder.setValueAt(no,j,0); 
        }
    }
     
     public void dataTableAllOrder(){
        int jumBaris =0;
        int i=0;
        conn = koneksi.koneksi();
        String query="SELECT * FROM header_order as a LEFT JOIN customer as b\n" +
                        "ON a.id_customer=b. id_customer\n" +
                        "LEFT JOIN users as c\n" +
                        "on a.id_user_sales = c.id_users\n" +
                        "LEFT JOIN detail_order as d\n" +
                        "on a.no_order = d.no_order\n" +
                        "LEFT JOIN barang as e\n" +       
                        "on d.kd_barang = e.kd_barang\n" +
                        "GROUP BY a.no_order\n" +
                        "ORDER by a.status_order DESC, d.tanggal_order DESC";
        try{
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);
            
            while(res.next()){
                jumBaris++; 
            }
        }catch(SQLException ex){  
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        } 
        
        String isi[][] = new String[jumBaris][7];
        try{
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            //int ad = 0;
            while(data.next()){   
                isi[i][1] = data.getString("no_order");
                isi[i][2] = data.getString("nama_customer");
                isi[i][3] = data.getString("total_penjualan"); 
                isi[i][4] = data.getString("tanggal_order");              
                isi[i][5] = data.getString("status_order"); 
                isi[i][6] = data.getString("nama_users"); 
                i++; 
            }
        }catch(SQLException ex){  
            JOptionPane.showMessageDialog(null, ex); 
        } 
        
        String NamaKolom[] = {"No","Nomor Order","Nama Customer","Total Harga Barang","Tanggal Order","Status Order","Nama Sales"}; 
        //DefaultTableModel model = new DefaultTableModel(){}; 
        DefaultTableModel dtms = new DefaultTableModel(isi,NamaKolom){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        dataOrderAllOrder.setModel(dtms);
    }
     
    private void dataTableOrderReport(){
        int jumBaris =0;
        int i=0;
        conn = koneksi.koneksi();
        String query="SELECT COUNT(status_order) AS allOrder,\n" +
                            "SUM(status_order = 'New') AS newOrder,\n" +
                            "SUM(status_order = 'Invoice') AS invoicedOrder,\n" +
                            "SUM(status_order = 'Shipped') AS shippedOrder,\n" +
                            "SUM(status_order = 'Completed') AS completedOrder\n" +
                        "FROM header_order\n" +
                        "WHERE status_order = 'New'\n" +
                            "OR status_order = 'Invoice'" +       
                            "OR status_order = 'Shipped'\n" +
                            "OR status_order = 'Completed'\n";
        try{
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);
            
            while(res.next()){
                jumBaris++; 
            }
        }catch(SQLException ex){  
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        } 
        
        String isi[][] = new String[jumBaris][5];
        try{
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            //int ad = 0;
            while(data.next()){   
                isi[i][0] = data.getString("allOrder");
                isi[i][1] = data.getString("newOrder");
                isi[i][2] = data.getString("invoicedOrder"); 
                isi[i][3] = data.getString("shippedOrder");              
                isi[i][4] = data.getString("completedOrder"); 
                i++; 
            }
        }catch(SQLException ex){  
            JOptionPane.showMessageDialog(null, ex); 
        } 
        
        String NamaKolom[] = {"Jumlah Order", "Jumlah New Order", "Jumlah Invoice Order", "Jumlah Shipped Order", "Jumlah Completed Order"}; 
        //DefaultTableModel model = new DefaultTableModel(){}; 
        DefaultTableModel dtms = new DefaultTableModel(isi,NamaKolom){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        dataOrderReportOrder.setModel(dtms);
    } 

//    public static void dataTableOrderReady() {
//        int jumBaris = 0;
//        int i = 0;
//        conn = koneksi.koneksi();
//        String query = "SELECT * FROM header_order as a LEFT JOIN customer as b\n"
//                + "ON a.id_customer=b. id_customer\n"
//                + "LEFT JOIN users as c\n"
//                + "on a.id_user_sales = c.id_users\n"
//                + "LEFT JOIN detail_order as d\n"
//                + "on a.no_order = d.no_order\n"
//                + "LEFT JOIN barang as e\n"
//                + "on d.kd_barang = e.kd_barang\n"
//                + "WHERE status_order='Invoice' \n"
//                + "GROUP BY a.no_order\n"
//                + "ORDER by a.status_order DESC, d.tanggal_order DESC";
//        try {
//            Statement stt = conn.createStatement();
//            ResultSet res = stt.executeQuery(query);
//
//            while (res.next()) {
//                jumBaris++;
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
//        }
//
//        String isi[][] = new String[jumBaris][7];
//        try {
//            Statement st = conn.createStatement();
//            ResultSet data = st.executeQuery(query);
//            //int ad = 0;
//            while (data.next()) {
//                isi[i][1] = data.getString("no_order");
//                isi[i][2] = data.getString("nama_customer");
//                isi[i][3] = data.getString("total_penjualan");
//                isi[i][4] = data.getString("tanggal_order");
//                isi[i][5] = data.getString("status_order");
//                isi[i][6] = data.getString("nama_users");
//                i++;
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(null, ex);
//        }
//
//        String NamaKolom[] = {"No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Order", "Status Order", "Nama Sales"};
//        //DefaultTableModel model = new DefaultTableModel(){}; 
//        DefaultTableModel dtms = new DefaultTableModel(isi, NamaKolom) {
//            @Override
//            public boolean isCellEditable(int row, int column) {
//                return false;
//            }
//        };
//        dataOrderSalesReady.setModel(dtms);
//    }
    public static void dataTableOrderReady() {
        int jumBaris = 0;
        int i = 0;
        conn = koneksi.koneksi();
        String query = "SELECT * FROM header_order as a LEFT JOIN customer as b\n"
                + "ON a.id_customer=b. id_customer\n"
                + "LEFT JOIN users as c\n"
                + "on a.id_user_gudang = c.id_users\n"
                + "LEFT JOIN detail_order as d\n"
                + "on a.no_order = d.no_order\n"
                + "LEFT JOIN barang as e\n"
                + "on d.kd_barang = e.kd_barang\n"
//                + "WHERE status_order='Completed' \n"
                + "WHERE status_order='Shipped' \n"
                + "GROUP BY a.no_order\n"
                + "ORDER by a.status_order DESC, d.tanggal_order DESC";
        try {
            Statement stt = conn.createStatement();
            ResultSet res = stt.executeQuery(query);

            while (res.next()) {
                jumBaris++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan");
        }

        String isi[][] = new String[jumBaris][7];
        try {
            Statement st = conn.createStatement();
            ResultSet data = st.executeQuery(query);
            //int ad = 0;
            while (data.next()) {
                isi[i][1] = data.getString("no_order");
                isi[i][2] = data.getString("nama_customer");
                isi[i][3] = data.getString("total_penjualan");
                isi[i][4] = data.getString("tanggal_bayar");
                isi[i][5] = data.getString("status_order");
                isi[i][6] = data.getString("nama_users");
                i++;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

        String NamaKolom[] = {"No", "Nomor Order", "Nama Customer", "Total Harga Barang", "Tanggal Bayar", "Status Order", "Admin Gudang"};
//        DefaultTableModel model = new DefaultTableModel(){}; 
        DefaultTableModel dtms = new DefaultTableModel(isi, NamaKolom) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        dataOrderSalesReady.setModel(dtms);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameSales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameSales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameSales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameSales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameSales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Order;
    private javax.swing.JPanel all_orders;
    private javax.swing.JButton b_cek_detail_order;
    private javax.swing.JButton b_cek_detail_order1;
    private javax.swing.JButton b_cek_detail_order2;
    private javax.swing.JButton btn_buat_order;
    private javax.swing.JButton btn_kirim_invoice;
    private javax.swing.JButton btn_refresh_customer;
    private javax.swing.JButton btn_refresh_order;
    private javax.swing.JButton btn_tambah_cust;
    private javax.swing.JButton cek_completed_order1;
    private javax.swing.JButton cetak_order_report1;
    private javax.swing.JPanel completed_orders;
    private javax.swing.JPanel customer;
    public static javax.swing.JTable dataCustomer;
    public static javax.swing.JTable dataOrderAllOrder;
    public static javax.swing.JTable dataOrderReportOrder;
    public static javax.swing.JTable dataOrderSalesCompleted;
    public static javax.swing.JTable dataOrderSalesInvoiced;
    public static javax.swing.JTable dataOrderSalesNew;
    public static javax.swing.JTable dataOrderSalesReady;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel order_invoiced;
    private javax.swing.JPanel order_ready;
    // End of variables declaration//GEN-END:variables
}
